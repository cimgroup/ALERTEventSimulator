<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:wsnt="http://docs.oasis-open.org/wsn/b-2" xmlns:wsa="http://www.w3.org/2005/08/addressing">
  <soap:Header>Header</soap:Header>
  <soap:Body>
    <wsnt:Notify>
      <wsnt:NotificationMessage>
        <wsnt:Topic>ALERT.Wikisensor.ArticleAdded</wsnt:Topic>
        <wsnt:ProducerReference>
          <wsa:Address>http://www.alert-project.eu/wikisensor</wsa:Address>
        </wsnt:ProducerReference>
        <wsnt:Message>
          <ns1:event xmlns:ns1="http://www.alert-project.eu/" xmlns:o="http://www.alert-project.eu/ontoevents-mdservice" xmlns:r="http://www.alert-project.eu/rawevents-forum" xmlns:r1="http://www.alert-project.eu/rawevents-mailinglist" xmlns:r2="http://www.alert-project.eu/rawevents-wiki" xmlns:s="http://www.alert-project.eu/strevents-kesi" xmlns:sm="http://www.alert-project.eu/stardom" xmlns:s1="http://www.alert-project.eu/strevents-keui" xmlns:sc="http://www.alert-project.eu/socrates" xmlns:p="http://www.alert-project.eu/panteon" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.alert-project.eu/alert-root.xsd"  >
            <ns1:head>
              <ns1:sender>WikiSensor</ns1:sender>
              <ns1:timestamp>1350462498496</ns1:timestamp>
              <ns1:sequencenumber>1</ns1:sequencenumber>
            </ns1:head>
            <ns1:payload>
              <ns1:meta>
                <ns1:startTime>1350462498496</ns1:startTime>
                <ns1:endTime>1350462498496</ns1:endTime>
                <ns1:eventName>ALERT.WikiSensor.ArticleAdded</ns1:eventName>
                <ns1:eventId>w1350462498496</ns1:eventId>
                <ns1:eventType>Request</ns1:eventType>
              </ns1:meta>
              <ns1:eventData>
                <r2:wikiSensor>
                  <r2:source>Optimis</r2:source>
                  <r2:url><![CDATA[http://techbase.kde.org/Development/Tutorials/Solid/Network_Management]]></r2:url>
                  <r2:title><![CDATA[Development/Tutorials/Solid/Networ.]]></r2:title>
                  <r2:rawText><![CDATA[7 Putting it all together
Prerequisites
This tutorial assumes that you have read Introduction to Solid and are familiar with the Solid hardware framework.  If you want to use any backends other than the fake backends provided in kdelibs, you will need to compile and install kdebase.
Features of the Solid Network Manager
The Solid Network Manager provides many useful features that have, up until now, been missing from KDE.  These include:
Notification of connection state.  This allows applications to know when there is no internet connection, allowing them to not bother the user with "Connection Error" messages
Notification of wireless connection state.
Access to network devices and interfaces.
Device <-> interface cross-referencing.
Note that there is a difference between the devices and the interfaces.  The device is a representation of the device itself and all the things that normally are associated with a PCI/USB device such as: bus address, IRQ, etc.  The interface is the name of the device e.g. 'eth0' which is used for commands like 'ifconfig.'
Let's begin
Our first program is going to be the most common use of the network manager, checking the network status of the system.  This will be useful for programs like KMail which will be able to see if the computer has network connectivity.  It would then be able to judge whether or not it should check for mail.
//test to see if networking is enabled on the system if(Solid::Networking::status() == Solid::Networking::Connected) { kDebug() << "Networking is enabled. Feel free to go online!"; } else { kDebug() << "Network not available."; }
To get informed about changes in network connectivity you'll have to connect to the events of Solid::Networking::notifier().
Cross-referencing devices to interfaces
It is no longer required for the user to figure out which device corresponds to a given interface as the NetworkManager has the ability to cross-reference a device to its interface name. This can be done with the following code:
//get a reference to the device manager Solid::DeviceManager &manager = Solid::DeviceManager::self();   //get a network device Solid::DeviceList netlist = manager.findDevicesFromQuery(Solid::Capability::NetworkHw, QString());   //check to see if no network devices were found if(netlist.empty() ) { kDebug() << "No network devices found!"; }   Solid::Device device = netlist[0]; Solid::NetworkHw *netdev = device.as<Solid::NetworkHw>(); //keep the program from crashing in the event that there's a bug in solid if(!netdev) { kDebug() << "Device could not be converted. There is a bug."; return 0; }   kDebug() << "The iface of" << device.udi() << "is" << netdev->ifaceName();
Initializing devices
]]></r2:rawText>
                  <r2:user>
                    <r2:id></r2:id>
                    <r2:name></r2:name>
                    <r2:email></r2:email>
                    <r2:editCount></r2:editCount>
                  </r2:user>
                  <r2:comment></r2:comment>
                  <r2:isMinor>false</r2:isMinor>
                </r2:wikiSensor>
              </ns1:eventData>
            </ns1:payload>
          </ns1:event>
        </wsnt:Message>
      </wsnt:NotificationMessage>
    </wsnt:Notify>
  </soap:Body>
</soap:Envelope>