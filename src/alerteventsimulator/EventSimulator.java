/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package alerteventsimulator;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.StringWriter;
import java.util.Properties;
import java.util.UUID;
import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 *
 * @author Sasa.Stojanovic
 */
public class EventSimulator extends javax.swing.JFrame {

    /**
     * Creates new form EventSimulator
     */
    public EventSimulator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cboType1 = new javax.swing.JComboBox();
        cboType3 = new javax.swing.JComboBox();
        btnSimulate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cboType5 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cboType4 = new javax.swing.JComboBox();
        txtNumber5 = new javax.swing.JTextField();
        txtNumber1 = new javax.swing.JTextField();
        txtNumber2 = new javax.swing.JTextField();
        txtNumber3 = new javax.swing.JTextField();
        txtNumber4 = new javax.swing.JTextField();
        cboType2 = new javax.swing.JComboBox();
        txtRepeat1 = new javax.swing.JTextField();
        txtRepeat2 = new javax.swing.JTextField();
        txtRepeat3 = new javax.swing.JTextField();
        txtRepeat4 = new javax.swing.JTextField();
        txtRepeat5 = new javax.swing.JTextField();
        txtDelay2 = new javax.swing.JTextField();
        txtDelay3 = new javax.swing.JTextField();
        txtDelay1 = new javax.swing.JTextField();
        txtDelay5 = new javax.swing.JTextField();
        txtDelay4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtActiveMQ = new javax.swing.JTextField();
        btnChange = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ALERT Event Simulator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(679, 273));
        setMinimumSize(new java.awt.Dimension(679, 273));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Events to generate"));

        jLabel2.setText("Event type:");

        cboType1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< Select event type >" }));
        cboType1.setPreferredSize(new java.awt.Dimension(56, 22));

        cboType3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< Select event type >" }));
        cboType3.setPreferredSize(new java.awt.Dimension(56, 22));

        btnSimulate.setText("Simulate");
        btnSimulate.setPreferredSize(new java.awt.Dimension(73, 22));
        btnSimulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimulateActionPerformed(evt);
            }
        });

        jLabel3.setText("Number of events:");

        jLabel4.setText("Repeat times:");

        cboType5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< Select event type >" }));
        cboType5.setPreferredSize(new java.awt.Dimension(56, 22));

        jLabel5.setText("Repeat delay (ms):");

        cboType4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< Select event type >" }));
        cboType4.setPreferredSize(new java.awt.Dimension(56, 22));

        txtNumber5.setText("0");
        txtNumber5.setPreferredSize(new java.awt.Dimension(12, 22));

        txtNumber1.setText("0");
        txtNumber1.setPreferredSize(new java.awt.Dimension(12, 22));

        txtNumber2.setText("0");
        txtNumber2.setPreferredSize(new java.awt.Dimension(12, 22));

        txtNumber3.setText("0");
        txtNumber3.setPreferredSize(new java.awt.Dimension(12, 22));

        txtNumber4.setText("0");
        txtNumber4.setPreferredSize(new java.awt.Dimension(12, 22));

        cboType2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "< Select event type >" }));
        cboType2.setPreferredSize(new java.awt.Dimension(56, 22));

        txtRepeat1.setText("0");
        txtRepeat1.setPreferredSize(new java.awt.Dimension(12, 22));

        txtRepeat2.setText("0");
        txtRepeat2.setPreferredSize(new java.awt.Dimension(12, 22));

        txtRepeat3.setText("0");
        txtRepeat3.setPreferredSize(new java.awt.Dimension(12, 22));

        txtRepeat4.setText("0");
        txtRepeat4.setPreferredSize(new java.awt.Dimension(12, 22));

        txtRepeat5.setText("0");
        txtRepeat5.setPreferredSize(new java.awt.Dimension(12, 22));

        txtDelay2.setText("0");
        txtDelay2.setPreferredSize(new java.awt.Dimension(12, 22));

        txtDelay3.setText("0");
        txtDelay3.setPreferredSize(new java.awt.Dimension(12, 22));

        txtDelay1.setText("0");
        txtDelay1.setPreferredSize(new java.awt.Dimension(12, 22));

        txtDelay5.setText("0");
        txtDelay5.setPreferredSize(new java.awt.Dimension(12, 22));

        txtDelay4.setText("0");
        txtDelay4.setPreferredSize(new java.awt.Dimension(12, 22));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSimulate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboType1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtRepeat1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtDelay1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboType2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtRepeat2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtDelay2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboType4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumber4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtRepeat4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtDelay4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboType5, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumber5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtRepeat5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtDelay5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cboType3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtNumber3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtRepeat3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtDelay3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboType1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDelay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboType2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDelay2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboType3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeat3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDelay3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboType4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeat4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDelay4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboType5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRepeat5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDelay5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSimulate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ALERT EVENT SIMULATOR");

        jLabel6.setText("ActiveMQ address:");

        txtActiveMQ.setPreferredSize(new java.awt.Dimension(65, 22));

        btnChange.setText("Change");
        btnChange.setPreferredSize(new java.awt.Dimension(69, 22));
        btnChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtActiveMQ, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtActiveMQ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(btnChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(8, 8, 8)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimulateActionPerformed
        SimulateEvents();
    }//GEN-LAST:event_btnSimulateActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeActionPerformed
        if (btnChange.getText() == "Change")
        {
            btnChange.setText("Save");
            txtActiveMQ.setEnabled(true);
        }
        else
        {
            btnChange.setText("Change");
            txtActiveMQ.setEnabled(false);
            Constants.sActiveMQAddress = txtActiveMQ.getText();
            if (TestActiveMQ(Constants.sActiveMQAddress))
                txtActiveMQ.setDisabledTextColor(Color.gray);
            else
                txtActiveMQ.setDisabledTextColor(Color.red);
        }
    }//GEN-LAST:event_btnChangeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                EventSimulator oEventSimulator = new EventSimulator(); 
                oEventSimulator.setVisible(true);
                oEventSimulator.SetControls();
            }
        });
    }
    
    public void SetControls()
    {
        Constants.sEventTypes.add(Constants.c_ET_ALERT_KESI_IssueNew);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_KESI_IssueUpdate);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_KESI_CommitNew);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_ForumSensor_ForumPostNew);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_MLSensor_MailNew);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_WikiSensor_ArticleAdded);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_WikiSensor_ArticleModified);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_UI_KEUIRequest);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_UI_APICallRequest);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_UI_Recommender_IdentitiesRecommendationRequest);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_UI_Recommender_IssueRecommendationRequest);
        Constants.sEventTypes.add(Constants.c_ET_ALERT_UI_Recommender_ModuleRecommendationRequest);
        
        for(int i = 0; i < Constants.sEventTypes.size(); i++)
        {
            cboType1.addItem(Constants.sEventTypes.get(i));
            cboType2.addItem(Constants.sEventTypes.get(i));
            cboType3.addItem(Constants.sEventTypes.get(i));
            cboType4.addItem(Constants.sEventTypes.get(i));
            cboType5.addItem(Constants.sEventTypes.get(i));
        }
        
        txtActiveMQ.setText(Constants.sActiveMQAddress);
        txtActiveMQ.setEnabled(false);
        
    }
    
    public void SimulateEvents(){
        Runnable r1 = CreateNewRunable(1);
        Runnable r2 = CreateNewRunable(2);
        Runnable r3 = CreateNewRunable(3);
        Runnable r4 = CreateNewRunable(4);
        Runnable r5 = CreateNewRunable(5);
        
        Thread thr1 = new Thread(r1);
        thr1.start();
        Thread thr2 = new Thread(r2);
        thr2.start();
        Thread thr3 = new Thread(r3);
        thr3.start();
        Thread thr4 = new Thread(r4);
        thr4.start();
        Thread thr5 = new Thread(r5);
        thr5.start();
    }
    
    public Runnable CreateNewRunable(final int i)
    {
        Runnable r = new Runnable() {
            @Override
            public void run() {
                try {
                    String sTopicName = "";
                    int iRepeat = 0;
                    int iNumber = 0;
                    int iDelay = 0;
                    JComboBox cboType = null;
                    JTextField txtRepeat = null;
                    JTextField txtNumber = null;
                    JTextField txtDelay = null;
                    switch (i)
                    {
                        case 1:
                            sTopicName = cboType1.getSelectedItem().toString();
                            iRepeat = Integer.parseInt(txtRepeat1.getText());
                            iNumber = Integer.parseInt(txtNumber1.getText());
                            iDelay = Integer.parseInt(txtDelay1.getText());
                            cboType = cboType1;
                            txtRepeat = txtRepeat1;
                            txtNumber = txtNumber1;
                            txtDelay = txtDelay1;
                            break;
                       case 2:
                            sTopicName = cboType2.getSelectedItem().toString();
                            iRepeat = Integer.parseInt(txtRepeat2.getText());
                            iNumber = Integer.parseInt(txtNumber2.getText());
                            iDelay = Integer.parseInt(txtDelay2.getText());
                            cboType = cboType2;
                            txtRepeat = txtRepeat2;
                            txtNumber = txtNumber2;
                            txtDelay = txtDelay2;
                            break;
                       case 3:
                            sTopicName = cboType3.getSelectedItem().toString();
                            iRepeat = Integer.parseInt(txtRepeat3.getText());
                            iNumber = Integer.parseInt(txtNumber3.getText());
                            iDelay = Integer.parseInt(txtDelay3.getText());
                            cboType = cboType3;
                            txtRepeat = txtRepeat3;
                            txtNumber = txtNumber3;
                            txtDelay = txtDelay3;
                            break;
                       case 4:
                            sTopicName = cboType4.getSelectedItem().toString();
                            iRepeat = Integer.parseInt(txtRepeat4.getText());
                            iNumber = Integer.parseInt(txtNumber4.getText());
                            iDelay = Integer.parseInt(txtDelay4.getText());
                            cboType = cboType4;
                            txtRepeat = txtRepeat4;
                            txtNumber = txtNumber4;
                            txtDelay = txtDelay4;
                            break;
                       case 5:
                            sTopicName = cboType5.getSelectedItem().toString();
                            iRepeat = Integer.parseInt(txtRepeat5.getText());
                            iNumber = Integer.parseInt(txtNumber5.getText());
                            iDelay = Integer.parseInt(txtDelay5.getText());
                            cboType = cboType5;
                            txtRepeat = txtRepeat5;
                            txtNumber = txtNumber5;
                            txtDelay = txtDelay5;
                            break;
                    }
                    
                    if (!sTopicName.equals("< Select event type >") && iRepeat > 0 && iNumber > 0)
                    {
                        Context jndiContext = null;
                        TopicConnectionFactory topicConnectionFactory = null;
                        TopicConnection topicConnection = null;
                        TopicSession topicSession = null;
                        Topic topic = null;
                        TopicPublisher topicPublisher = null;
                        TextMessage message = null;

                        try {
                            Properties env = new Properties( );
                            env.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.activemq.jndi.ActiveMQInitialContextFactory");
                            env.setProperty(Context.PROVIDER_URL, Constants.sActiveMQAddress);
                            env.setProperty("topic." + sTopicName, sTopicName);
                            jndiContext = new InitialContext(env);
                        }
                        catch (NamingException e){
                            System.out.println("Could not create JNDI API " + "context: " + e.toString());
                            e.printStackTrace();
                        }

                        try {
                            topicConnectionFactory = (TopicConnectionFactory) jndiContext.lookup("TopicConnectionFactory");
                            topic = (Topic) jndiContext.lookup(sTopicName);
                        }
                        catch (NamingException e) {
                            System.out.println("JNDI API lookup failed: " +  e.toString());
                            e.printStackTrace();
                        }

                        try
                        {
                            topicConnection = topicConnectionFactory.createTopicConnection();
                            topicSession = topicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
                            topicPublisher = topicSession.createPublisher(topic);
                            message = topicSession.createTextMessage();

                            cboType.setEnabled(false);
                            txtRepeat.setEnabled(false);
                            txtNumber.setEnabled(false);
                            txtDelay.setEnabled(false);

                            for (int i = 0; i < iRepeat; i++)
                            {
                                Long lTimestamp = (Long)System.currentTimeMillis();
                                for (int j = 0; j < iNumber; j++)
                                {
                                    String xml = SimulateEventType(sTopicName);
                                    message.setText(xml);
                                    topicPublisher.publish(message);
                                    txtNumber.setText(((Integer)(j + 1)).toString() + "/" + ((Integer)iNumber).toString());
                                }
                                txtRepeat.setText(((Integer)(i + 1)).toString() + "/" + ((Integer)iRepeat).toString());
                                if (i != iRepeat - 1)
                                {
                                    Long iSleep = iDelay - ((Long)System.currentTimeMillis() - lTimestamp);
                                    if (iSleep < 0)
                                        iSleep = 0l;
                                    Thread.sleep(iSleep);
                                }
                            }

                            cboType.setEnabled(true);
                            txtNumber.setEnabled(true);
                            txtNumber.setText(((Integer)iNumber).toString());
                            txtRepeat.setEnabled(true);
                            txtRepeat.setText(((Integer)iRepeat).toString());
                            txtDelay.setEnabled(true);
                        } 
                        catch (JMSException e)
                        {
                            System.out.println("Exception occurred: " + e.toString());
                        } 
                        finally 
                        {
                            if (topicConnection != null)
                            {
                                try
                                {
                                    topicConnection.close();
                                }
                                catch (JMSException e){}
                            }
                        }
                    }
                } 
                catch (InterruptedException iex) {}
                catch (Exception ex) {}
            }
        };
        
        return r;
    }
    
    public String SimulateEventType(String sEventType) throws ParserConfigurationException, SAXException, IOException
    {
        String sXML = "";
        if (sEventType.equals(Constants.c_ET_ALERT_KESI_IssueNew))
        {
            sXML = SimulateIssueNew();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_KESI_IssueUpdate))
        {
            sXML = SimulateIssueUpdate();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_KESI_CommitNew))
        {
            sXML = SimulateCommitNew();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_ForumSensor_ForumPostNew))
        {
            sXML = SimulateForumPostNew();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_MLSensor_MailNew))
        {
            sXML = SimulateMailNew();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_WikiSensor_ArticleAdded))
        {
            sXML = SimulateArticleAdded();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_WikiSensor_ArticleModified))
        {
            sXML = SimulateArticleModified();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_UI_KEUIRequest))
        {
            sXML = SimulateKEUIRequest();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_UI_APICallRequest))
        {
            sXML = SimulateAPICallRequest();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_UI_Recommender_IdentitiesRecommendationRequest))
        {
            sXML = SimulateIdentitiesRecommendationRequest();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_UI_Recommender_IssueRecommendationRequest))
        {
            sXML = SimulateIssueRecommendationRequest();
        }
        else if (sEventType.equals(Constants.c_ET_ALERT_UI_Recommender_ModuleRecommendationRequest))
        {
            sXML = SimulateModuleRecommendationRequest();
        }
        return sXML;
    }
    
    public String SimulateIssueNew() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_KESI_IssueNew);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "s:issueId");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "s:issueId", sID, "s:issue");
        return sFileEvent;
    }
    
    public String SimulateIssueUpdate() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_KESI_IssueUpdate);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "s:issueId");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "s:issueId", sID, "s:issue");
        return sFileEvent;
    }
    
    public String SimulateCommitNew() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_KESI_CommitNew);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String SimulateForumPostNew() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_ForumSensor_ForumPostNew);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "r:postId");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "r:postId", sID, "r:forumSensor");
        return sFileEvent;
    }
    
    public String SimulateMailNew() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_MLSensor_MailNew);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "r1:messageId");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "r1:messageId", sID, "r1:message");
        return sFileEvent;
    }
    
    public String SimulateArticleAdded() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_WikiSensor_ArticleAdded);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "r2:id");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "r2:id", sID, "r2:wikiSensor");
        return sFileEvent;
    }
    
    public String SimulateArticleModified() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_WikiSensor_ArticleModified);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        
        sFileEvent = DeleteTag(sFileEvent, "r2:id");
        String sID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "r2:id", sID, "r2:wikiSensor");
        return sFileEvent;
    }
    
    public String SimulateAPICallRequest() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_UI_APICallRequest);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String SimulateKEUIRequest() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_UI_KEUIRequest);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String SimulateIdentitiesRecommendationRequest() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_UI_Recommender_IdentitiesRecommendationRequest);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String SimulateIssueRecommendationRequest() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_UI_Recommender_IssueRecommendationRequest);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String SimulateModuleRecommendationRequest() throws ParserConfigurationException, SAXException, IOException
    {
        String sFileEvent = GetRandomFileFromFolder(OSValidator.GetAppPath() + "/EventSamples/" + Constants.c_ET_ALERT_UI_Recommender_ModuleRecommendationRequest);
        
        sFileEvent = DeleteTag(sFileEvent, "ns1:eventId");
        String sEventID = UUID.randomUUID().toString();
        sFileEvent = InsertTagAfterTag(sFileEvent, "ns1:eventId", sEventID, "ns1:meta");
        return sFileEvent;
    }
    
    public String GetRandomFileFromFolder(String sFolder) throws ParserConfigurationException, SAXException, IOException
    {
        String sFile = "";
        try
        {
            File fEventsFolder = new File(sFolder);
            File[] fEventFiles = fEventsFolder.listFiles();

            int i = (int)(Math.random() * fEventFiles.length);

            if (fEventFiles[i].isFile())
            {
                DocumentBuilderFactory dbfFactory = DocumentBuilderFactory.newInstance();
                dbfFactory.setNamespaceAware(true);
                Document dDoc = dbfFactory.newDocumentBuilder().parse(fEventFiles[i]);
                dDoc.getDocumentElement().normalize();
                StringWriter stw = new StringWriter(); 
                Transformer serializer = TransformerFactory.newInstance().newTransformer(); 
                serializer.transform(new DOMSource(dDoc), new StreamResult(stw)); 
                sFile = stw.toString();
            }
        }
        catch (Exception ex) {}
        
        return sFile;
    }
    
    public String InsertTagAfterTag(String sFile, String sNewTag, String sNewTagValue, String sAfterTag)
    {
        try 
        {
            String sNewTagFull = "<" + sNewTag + ">" + sNewTagValue + "</" + sNewTag + ">";
            sAfterTag = "<" + sAfterTag + ">";
            sFile = sFile.substring(0, sFile.indexOf(sAfterTag) + sAfterTag.length()) + sNewTagFull + sFile.substring(sFile.indexOf(sAfterTag) + sAfterTag.length());  
        }
        catch (Exception ex) {}
        
        return sFile;
    }
    
    public String DeleteTag(String sFile, String sTagToDelete)
    {
        try 
        {
            if (sFile.contains(sTagToDelete))
            {
                String sTagToDeleteStart = "<" + sTagToDelete + ">";
                String sTagToDeleteEnd = "</" + sTagToDelete + ">";
                sFile = sFile.substring(0, sFile.indexOf(sTagToDeleteStart)) + sFile.substring(sFile.indexOf(sTagToDeleteEnd) + sTagToDeleteEnd.length());
            }
        }
        catch (Exception ex) {}
        
        return sFile;
    }
    
    public boolean TestActiveMQ(String sActiveMQAddress)
    {
        boolean bValidActiveMQAddress = true;
        
        Context jndiContext = null;
        TopicConnectionFactory topicConnectionFactory = null;
        TopicConnection topicConnection = null;
        TopicSession topicSession = null;
        Topic topic = null;
        TopicPublisher topicPublisher = null;
        TextMessage message = null;

        try {
            Properties env = new Properties( );
            env.setProperty(Context.INITIAL_CONTEXT_FACTORY,"org.apache.activemq.jndi.ActiveMQInitialContextFactory");
            env.setProperty(Context.PROVIDER_URL, Constants.sActiveMQAddress);
            env.setProperty("topic." + Constants.c_ET_ALERT_KESI_IssueNew, Constants.c_ET_ALERT_KESI_IssueNew);
            jndiContext = new InitialContext(env);
        }
        catch (NamingException e){
            System.out.println("Could not create JNDI API " + "context: " + e.toString());
            e.printStackTrace();
        }

        try {
            topicConnectionFactory = (TopicConnectionFactory) jndiContext.lookup("TopicConnectionFactory");
            topic = (Topic) jndiContext.lookup(Constants.c_ET_ALERT_KESI_IssueNew);
        }
        catch (NamingException e) {
            System.out.println("JNDI API lookup failed: " +  e.toString());
            e.printStackTrace();
        }

        try
        {
            topicConnection = topicConnectionFactory.createTopicConnection();
            topicSession = topicConnection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);
            topicPublisher = topicSession.createPublisher(topic);
            message = topicSession.createTextMessage();
        } 
        catch (JMSException e)
        {
            System.out.println("Exception occurred: " + e.toString());
            bValidActiveMQAddress = false;
        } 
        finally 
        {
            if (topicConnection != null)
            {
                try
                {
                    topicConnection.close();
                }
                catch (JMSException e){}
            }
            return bValidActiveMQAddress;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnSimulate;
    private javax.swing.JComboBox cboType1;
    private javax.swing.JComboBox cboType2;
    private javax.swing.JComboBox cboType3;
    private javax.swing.JComboBox cboType4;
    private javax.swing.JComboBox cboType5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtActiveMQ;
    private javax.swing.JTextField txtDelay1;
    private javax.swing.JTextField txtDelay2;
    private javax.swing.JTextField txtDelay3;
    private javax.swing.JTextField txtDelay4;
    private javax.swing.JTextField txtDelay5;
    private javax.swing.JTextField txtNumber1;
    private javax.swing.JTextField txtNumber2;
    private javax.swing.JTextField txtNumber3;
    private javax.swing.JTextField txtNumber4;
    private javax.swing.JTextField txtNumber5;
    private javax.swing.JTextField txtRepeat1;
    private javax.swing.JTextField txtRepeat2;
    private javax.swing.JTextField txtRepeat3;
    private javax.swing.JTextField txtRepeat4;
    private javax.swing.JTextField txtRepeat5;
    // End of variables declaration//GEN-END:variables
}
